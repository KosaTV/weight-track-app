@use "sass:map";

$white-bg: hsl(0, 0%, 100%);
$dark-bg: hsl(238, 30%, 12%);

$app-bg: "app-bg";
$primary-color: "primary-color";
$second-color: "second-color";
$focus-bg: "focus-bg";
$gray-color: "gray-color";
$accent-color: "accent-color";
$hover-color: "hover-color";
$shadow-color: "shadow-color";
$shadow: "shadow";
$text: "text";

$themes: (
	default: (
		app-bg: hsl(0, 0%, 98%),
		primary-color: hsl(165, 100%, 39%),
		second-color: $white-bg,
		focus-bg: $white-bg,
		gray-color: hsl(0 0% 70%),
		accent-color: hsl(0 0% 96%),
		hover-color: hsl(0 0% 98%),
		shadow-color: rgba(0, 0, 0, 0.05),
		shadow: 0 15px 35px 0 rgba(0 0 0 / 5%),
		text: $dark-bg
	),
	dark: (
		primary-color: hsl(165, 100%, 39%),
		app-bg: hsl(236, 32%, 8%),
		second-color: $dark-bg,
		focus-bg: black,
		gray-color: hsl(233, 15%, 54%),
		accent-color: hsl(238, 35%, 15%),
		hover-color: hsl(238, 30%, 15%),
		shadow-color: rgba(0 0 0 / 50%),
		shadow: 0 15px 35px 0 rgba(0 0 0 / 50%),
		text: $white-bg
	)
);

$theme-map: null;

@mixin themed() {
	@each $theme, $map in $themes {
		.theme--#{$theme} & {
			$theme-map: () !global;
			@each $key, $property in $map {
				$value: map.get(map.get($themes, $theme), #{$key});
				$theme-map: map.merge(
					$theme-map,
					(
						$key: $value
					)
				) !global;
			}
			@content;
			$theme-map: null !global;
		}
	}
}

@function t($key) {
	@return map.get($theme-map, $key);
}
